# This file is part of the tschm/.config-templates repository
# (https://github.com/tschm/.config-templates).
#
# GitLab CI/CD Configuration
# Purpose: This configuration defines the CI/CD pipeline for GitLab
#          to ensure code quality and compatibility across different environments.

stages:
  - setup
  - lint
  - test
  - build
  - docs
  - release

variables:
  PYTHON_VERSION: "3.12"

# Reusable template for setting up the environment
.setup_template: &setup_template
  before_script:
    # Install uv
    - pip install uv
    # Install Task
    - curl -sL https://taskfile.dev/install.sh | sh
    - mv ./bin/task /usr/local/bin/task
    # Check for pyproject.toml
    - |
      if [ -f "pyproject.toml" ]; then
        export PYPROJECT_EXISTS=true
      else
        export PYPROJECT_EXISTS=false
      fi
    # Create virtual environment
    - uv venv --python $PYTHON_VERSION
    # Install dependencies if pyproject.toml exists
    - |
      if [ "$PYPROJECT_EXISTS" = "true" ]; then
        uv sync --all-extras
      else
        echo "No pyproject.toml found, skipping package installation"
      fi

# Setup job
setup:
  stage: setup
  image: python:$PYTHON_VERSION
  <<: *setup_template
  script:
    - echo "Environment setup complete"
  artifacts:
    paths:
      - .venv/
    expire_in: 1 hour

# Linting job
lint:
  stage: lint
  image: python:$PYTHON_VERSION
  needs:
    - setup
  dependencies:
    - setup
  <<: *setup_template
  script:
    - task quality:lint
    - task quality:fmt

# Testing job with matrix for multiple Python versions
.test_template: &test_template
  stage: test
  <<: *setup_template
  script:
    - uv pip install pytest
    - uv run pytest tests
test:python-3.11:
  <<: *test_template
  image: python:3.11

test:python-3.12:
  <<: *test_template
  image: python:3.12

test:python-3.13:
  <<: *test_template
  image: python:3.13

# Build job
build:
  stage: build
  image: python:$PYTHON_VERSION
  needs:
    - test:python-3.11
    - test:python-3.12
    - test:python-3.13
  <<: *setup_template
  script:
    - task build:build
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Documentation job with Pages deployment
pages:
  stage: docs
  image: python:$PYTHON_VERSION
  needs:
    - lint
    - test:python-3.12
  <<: *setup_template
  script:
    - task docs:docs
    - task docs:test
    - task docs:marimushka
    - task docs:book
    # GitLab Pages expects the content to be in the public directory
    - mkdir -p public
    - cp -r _book/* public/ || echo "No _book directory found"
    - cp -r book/_build/* public/ || echo "No book/_build directory found"
  artifacts:
    paths:
      - public
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Release jobs
# These jobs are triggered manually when a tag is created

# Create a release when a tag is pushed
release:tag:
  stage: release
  image: python:$PYTHON_VERSION
  script:
    - echo "Creating release for tag $CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG

# Build the package for release
release:build:
  stage: release
  image: python:$PYTHON_VERSION
  needs:
    - release:tag
  <<: *setup_template
  script:
    - |
      if [ -f "pyproject.toml" ]; then
        # Extract version from tag (remove 'v' prefix if present)
        version=${CI_COMMIT_TAG#v}
        echo "Setting version to $version"
        
        # Update version in pyproject.toml
        sed -i.bak "s/^version = .*/version = \"$version\"/" pyproject.toml
        rm pyproject.toml.bak
        
        # Build the package
        task build:build
      else
        echo "No pyproject.toml found, skipping build"
      fi
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

# Publish to PyPI
release:pypi:
  stage: release
  image: python:$PYTHON_VERSION
  needs:
    - release:build
  script:
    - |
      if [ -d "dist" ]; then
        pip install twine
        # Use CI/CD variables for PyPI credentials
        # TWINE_USERNAME and TWINE_PASSWORD should be set in GitLab CI/CD variables
        # For security, use masked variables in GitLab settings
        twine upload dist/*
      else
        echo "No dist directory found, skipping PyPI publish"
      fi
  rules:
    - if: $CI_COMMIT_TAG
    # Only run on protected tags in the main project (not forks)
    - if: $CI_PROJECT_NAMESPACE == $CI_PROJECT_ROOT_NAMESPACE